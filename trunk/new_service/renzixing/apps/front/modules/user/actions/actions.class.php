<?php
// auto-generated by sfPropelCrud
// date: 2008/04/12 06:55:09
?>
<?php

/**
 * user actions.
 *
 * @package    renzixing
 * @subpackage user
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class userActions extends sfActions
{

/*
  public function executeIndex()
  {
    return $this->forward('user', 'list');
  }
*/



  public function executeList()
  {
  	$this->handleAdmin();
    $this->users = UserPeer::doSelect(new Criteria());
  }

  public function executeShow()
  {
  	$this->handleAdmin();
    $this->user = UserPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->user);
  }

/*
  public function executeCreate()
  {
    $this->user = new User();

    $this->setTemplate('edit');
  }
*/



  public function executeEdit()
  {
  	$this->handleAdmin();
    $this->user = UserPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->user);
  }

  public function executeUpdate()
  {
  	$this->handleAdmin();
    if (!$this->getRequestParameter('id'))
    {
      $user = new User();
    }
    else
    {
      $user = UserPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($user);
    }

    $user->setId($this->getRequestParameter('id'));
    $user->setRole($this->getRequestParameter('role'));
    $user->setUsername($this->getRequestParameter('username'));
    $user->setPassword($this->getRequestParameter('password'));
    $user->setEmail($this->getRequestParameter('email'));

    $user->save();

    return $this->redirect('user/show?id='.$user->getId());
  }

  public function executeDelete()
  {
  	$this->handleAdmin();
    $user = UserPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($user);

    $user->delete();

    return $this->redirect('user/list');
  }


/*
	public function initialize($context, $param = null) {
		parent::initialize($context);


		return	true;
	}
*/

	private function handleAdmin() {

		if (!$this->isAdmin()) {
		#	var_dump('AAAADDDMMMIN');
			return $this->redirect('user/login');
		}

	}

	private function isAdmin() {

		$arrAdmin	= array(
			'leakon'	=> true,
			'石磊'		=> true,
		);

		$userName	= $this->getUser()->getUsername();

		return	isset($arrAdmin[$userName]);
	}


	private function redirectRefer() {

		if ($refer = HelperView::getRefer()) {
			$this->redirect($refer);
		} else {
			$this->forward('user', 'login');
		}

		return	true;
	}

	public function executeIndex() {
		$this->setLayout(false);
		return $this->forward('user', 'list');
	}

	public function executeLogin() {

		$this->setLayout(false);

		if ($this->getRequest()->getMethod() == sfRequest::POST) {

			$this->passwordNotMatch	= true;

			$reqUsername	= trim($this->getRequestParameter('username'));
			$reqPassword	= $this->getRequestParameter('password');

			if (!empty($reqUsername) && UserPeer::isValidUsername($reqUsername)) {
				$objUser	= UserPeer::checkPassword($reqUsername, $reqPassword);

				if ($objUser) {

					$sfUser	= $this->getUser();

					$sfUser->setLoggedIn($objUser->getId());

					$sfUser->addCredential($objUser->getRole());

					return	$this->redirectRefer();

				} else {

				}

				$this->getRequest()->setError('password', '用户名和密码不匹配');
			}


		} else {


		}
	}


	public function executeCreate() {

		if ($this->getRequest()->getMethod() == sfRequest::POST) {

			$objUser	= new User();
			$objUser->setUsername($this->getRequestParameter('username'));
			$objUser->setPassword($this->getRequestParameter('password'));
			$objUser->setCreatedTime($_SERVER['REQUEST_TIME']);

			$boolSavedOK	= $objUser->save();

			if ($boolSavedOK) {

				// get user info, set it to user session
			 	$this->getUser()->setLoggedIn($objUser->getId());

			 	return	$this->redirectRefer();

			}


		} else {


		}

	}

	public function handleErrorCreate() {
		return sfView::SUCCESS;
	}

	public function executeManage() {

		if ($this->getRequest()->getMethod() == sfRequest::POST && $reqUsername = $this->getUser()->getUsername()) {

			$objUser	= UserPeer::userExists($reqUsername);

			if ($reqPassword = $this->getRequestParameter('password')) {
				$objUser->setPassword($reqPassword);
			}

			if ($reqNickname = $this->getRequestParameter('nickname')) {
				$objUser->setNickname($reqNickname);
			}

			if ($reqEmail = $this->getRequestParameter('email')) {
				$objUser->setEmail($reqEmail);
			}

			$boolSavedOK	= $objUser->save();

			if ($boolSavedOK) {

			 	return	$this->redirectRefer();

			}

		} else {

			$this->objUser	= UserPeer::userExists($this->getUser()->getUsername());

		}

	}

	public function handleErrorManage() {
		$this->objUser	= UserPeer::userExists($this->getUser()->getUsername());
	#	var_dump(2324);exit;
		return sfView::SUCCESS;
	}

	public function validateManage() {

		$hasError	= false;

		if ($reqPassword = $this->getRequestParameter('password')) {

			// checkpoint 1		old password
			$oldPassword		= $this->getRequestParameter('oldpass');
			$userName		= sfContext::getInstance()->getUser()->getUsername();
			if (!UserPeer::checkPassword($userName, $oldPassword)) {
				$this->getRequest()->setError('oldpass', '原始密码不正确');
				$hasError	= true;
			}

			// checkpoint 2		new password
			$reqPassword		= $this->getRequestParameter('password');
			if (strlen($reqPassword) < 4) {
				$this->getRequest()->setError('password', '为了您的帐户安全，密码最少需要 4 个字');
				$hasError	= true;
			}

			// checkpoint 3		confirm password
			$reqConfirm		= $this->getRequestParameter('confirm');
			if ($reqPassword != $reqConfirm) {
				$this->getRequest()->setError('confirm', '两次输入的密码不一致');
				$hasError	= true;
			}

		}

		return	$hasError ? false : true;
	}


	public function executeLogout() {

		$this->setLayout(false);

		$this->getUser()->clearSession();


		return	$this->redirectRefer();
	}

/*
	public function executeLoginAuth() {

		$this->setTemplate('login');

		$reqUsername	= trim($this->getRequestParameter('username'));
		$reqPassword	= $this->getRequestParameter('password');

		$objUser	= UserPeer::checkPassword($reqUsername, $reqPassword);

		if ($objUser) {
			$this->getUser()->setLoggedIn($objUser->getId());
			$this->forward('issue');
		} else {

		#	echo	1234132;
		#	$this->getRequest()->setError('password', '密码错误');
		}


	}


	public function executeSecure() {

	}



*/




}
